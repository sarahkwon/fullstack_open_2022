[{"F:\\fullstack_open_2022\\part2\\phonebook\\src\\index.js":"1","F:\\fullstack_open_2022\\part2\\phonebook\\src\\App.js":"2","F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\NewPersonForm.js":"3","F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\FilteredList.js":"4","F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\NameFilter.js":"5","F:\\fullstack_open_2022\\part2\\phonebook\\src\\services\\persons.js":"6","F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\Notification.js":"7"},{"size":185,"mtime":1674865658691,"results":"8","hashOfConfig":"9"},{"size":3690,"mtime":1675582579559,"results":"10","hashOfConfig":"9"},{"size":513,"mtime":1674574899246,"results":"11","hashOfConfig":"9"},{"size":659,"mtime":1674573665350,"results":"12","hashOfConfig":"9"},{"size":295,"mtime":1674448344056,"results":"13","hashOfConfig":"9"},{"size":660,"mtime":1675586614113,"results":"14","hashOfConfig":"9"},{"size":238,"mtime":1674876755432,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cnhbjb",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"F:\\fullstack_open_2022\\part2\\phonebook\\src\\index.js",[],[],"F:\\fullstack_open_2022\\part2\\phonebook\\src\\App.js",["41","42"],[],"import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport NewPersonForm from './components/NewPersonForm.js'\nimport FilteredList from './components/FilteredList.js'\nimport NameFilter from './components/NameFilter.js'\nimport personService from './services/persons.js'\nimport Notification from './components/Notification.js'\n\nconst Header = (props) => {\n  const {title} = props;\n  return <h2>{title}</h2>\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(personsToAdd => {\n        setPersons(persons.concat(personsToAdd))\n      })\n  }, []) \n\n  const filteredPeople = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const uniqueNames = new Set(persons.map(p => p.name))\n\n    if (uniqueNames.has(newName)) { //name already exists in phonebook\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.filter(person => person.name === newName)\n        const personToUpdate = person[0]\n        const updatedPerson = {...personToUpdate, number: newNumber}\n        personService\n          .update(updatedPerson.id, updatedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== updatedPerson.id ? person : returnedPerson))\n            setNewName('')\n            setNewNumber('')\n            setErrorMessage(`Updated ${returnedPerson.name}`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setErrorMessage(`Information of ${updatedPerson.name} has already been removed from server`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n      }\n    } else { //new name to add \n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setErrorMessage(`Added ${returnedPerson.name}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n    }\n    \n  }\n\n  const deletePerson = (id) => {\n    personService\n      .removePerson(id)\n      .catch(error => {\n        setErrorMessage(`This person has already been removed from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n    setErrorMessage(`Successfully deleted contact`)\n    setPersons(persons.filter(person => person.id !== id))\n  }\n\n  return (\n    <div>\n      <Header title=\"Phonebook\"/>\n      <Notification message={errorMessage}/>\n      <NameFilter \n        filter={filter} \n        setFilter={setFilter}\n      />\n      <Header title=\"add a new\"/>\n      <NewPersonForm \n        newName={newName} \n        newNumber={newNumber} \n        addPerson={addPerson} \n        handleNameChange={handleNameChange} \n        handleNumberChange={handleNumberChange}\n      />\n      <Header title=\"Numbers\"/>\n      <FilteredList filteredPeople={filteredPeople} deletePerson={deletePerson}/>\n        \n    </div>\n  )\n}\n\nexport default App","F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\NewPersonForm.js",[],[],"F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\FilteredList.js",[],[],"F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\NameFilter.js",[],[],[],"F:\\fullstack_open_2022\\part2\\phonebook\\src\\services\\persons.js",["43"],[],"import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst removePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, removePerson }","F:\\fullstack_open_2022\\part2\\phonebook\\src\\components\\Notification.js",["44"],[],"import { useEffect } from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification",{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":13},{"ruleId":"49","severity":1,"message":"50","line":27,"column":6,"nodeType":"51","endLine":27,"endColumn":8,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":24,"column":1,"nodeType":"55","endLine":24,"endColumn":56},{"ruleId":"45","severity":1,"message":"56","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":19},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'persons'. Either include it or remove the dependency array. You can also do a functional update 'setPersons(p => ...)' if you only need 'persons' in the 'setPersons' call.","ArrayExpression",["57"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.",{"desc":"58","fix":"59"},"Update the dependencies array to be: [persons]",{"range":"60","text":"61"},[833,835],"[persons]"]